


           
      In the past two months, I've heard some news about a new C++ syntax from Microsoft to allow easier .NET application development. This new C++ syntax is called C++/CLI. It fully implements the features of CLI, making development as easy as using C#. And the most exciting feature is that C++/CLI allows unmanaged(traditional) C++ code and managed(.NET) C++ code to be used in one single file. After installation of Visual C++ Express 2005 Beta, I started to code using C++/CLI.  First, I used the new syntax to write a simple .NET Console Application. The syntax is not hard and it is clear. So I can use it as if using C# or VB.NET. Next, I followed the How-tos to try the interoperability between .NET and native code. Surprisingly, the interoperation is simple and two different platforms can be integrated seamlessly. For example, I can transfer an .NET array into native C++ code to create a STL vector, which can be used normally in native C++ code. That means in some degree, STL is integrated into .NET Framework!  Here is an example code demostrating how easy is .NET array working in a native function:    #include <iostream> #include <vector> #include <iterator> #include <algorithm> #include <functional>  using namespace std; using namespace stdcli::language; using namespace System;  #pragma unmanaged  void Testing(const int a[]) { 	vector<int> v(a, a + sizeof(a)); 	sort(v.begin(), v.end(), greater<int>()); 	copy(v.begin(), v.end(), ostream_iterator<int>(cout, " ")); }  #pragma managed  int main() { 	array<int>^ a = gcnew array<int>{6, 8, 12, 33, 7, -4}; 	pin_ptr<int> p = [0]; 	Testing(p); 	Console::ReadKey(true); 	return 0; }    As you can see, it is very easy to let .NET and native code working together. I'm really looking forward to the release of .NET Framework 2.0.
     

        
