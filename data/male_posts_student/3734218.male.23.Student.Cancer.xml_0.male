


       
      Well, there are lots of posts about this so far, and I'll be damned if I'm not gonna have my say!  In case you haven't heard of this yet, let me give you some links to get you up to date:   urlLink Apple   urlLink Konfabulator Website   urlLink MacCentral   urlLink The Register    Ok, if you look at some of the websites you should be up to speed, and you should see a lot of some people's arguments as to whether this is a good or a bad thing, and even whether this is a legal or an illegal thing.  Now I'll give you my take on this.  Konfabulator (K) was released sometime during the heyday of Jaguar, I've tried it a couple of times (and am using it right now, unregistered however).  There are good and there are bad things about it.  What it is is a little runtime for "widgets" written in Javascript ( urlLink Here 's a link for K developers, if you're interested).  Dashboard is also a runtime environment for Javascript "widgets."  Same thing?  Well, from what I can glean from Apple's website, and what I've heard other places, not quite.  There's the question of "modality."  Meaning that if you use Dashboard, and you want to use/see one of your widgets, you have to hit a key (much like ExposÃ©), during that time you can *only* use Dashboard widgets, which is why it's labeled "modal," because when you're using Dashboard, it's the only thing you can do.  I imagine everything behind Dashboard would be slightly grayed out, like when one activates ExposÃ©.  K widgets, by contrast, are always available, always visible.  This is a very important difference (and, I believe for my usage, a major innovation/advantage for Apple).  Despite dissimilarities, the question still remains, did Apple wrong K (Arlo Rose, the community, etc) by creating Dashboard?  Well, despite the fact that I am no lawyer (and bear that in mind), I will discuss the legality of their actions.  First, you can't copyright or trademark a feature, feel, design, or or the problem an application solves.  You can copyright the source code and the application as a whole, which lets you control licensing and sales, and things of that nature.  Trademarks have to do with registered products (ie, Apple's Macintosh (TM) line of computers).  I think it's fairly obvious that Apple hasn't violated copyright or trademark laws.  I'm sure Apple's legal team would have informed them if they did, or were going to.  They also couldn't step on a patent, because (I'm fairly sure) Rose doesn't own a patent on javascript runtime engines (which is good, because I'm relatively sure he didn't originate the idea, regardless of whether he "ripped it off" or not).  Basically, all that leaves is antitrust issues, and those are very regional (in regards to nations and states within the U.S.)  Is Apple in the wrong ethically, though?  In my opinion (and you're welcome to disagree), no.  Here are my reasons:  1)  The idea behind both of them wasn't originated by Arlo Rose, it has been an idea evolving for many years, and although Rose's implementation of this idea is very good and polished, it doesn't give him any more rights over the idea than other implementations.  2)  Apple's usage of the term "widget" also borrows from earlier implementations (and, indeed, earlier uses), as does Rose's.  I think Rose's comment about this confusing customers is paramount to the author of a text editing application saying that another developer shouldn't call the files his text editor creates/edits "text" files.  (Not because of common attributes between text files and "widgets," but because both terms are commonly used.)  If he had called them "Konfabulatees" or something he originated, then he would have a legitimate gripe.  3)  Rose has *years* of monopoly dominance in his market.  Even now he has (at least) *9 month's* of forewarning that he's going to have a competitor.  He has a lot of time to add features (and borrow ideas from Apple, which is perfectly acceptable) to keep his user base.  4)  This is a clincher for me:  The idea behind both of these applications is *very* generic.  They're application runtimes which interpret Javascript to allow developers to easily develop a certain type of application.  At the very core of what these applications are, they are tools for *developers.*  They are tools that allow for rapid development.  And there are lots of previous projects which have a lot in common with both of these applications.  You can even draw parallels with Java (with it's runtime environment and features which allow for quick development).  Given the fact that there are only a limited number of "basic" developments (ie, interpreted vs. compiled, javascript vs. perl, etc), I don't think we can say Apple was *only* influenced by K and that K was a patent-worthy, revolutionary idea.  One last thought: This seems to happen when developers (I can't be sure, but I sure suspect it) ask themselves "I think Mac OS X needs   application, how would Apple do it?"  Then, when Apple gets around to implementing it (and yes, this seems like something that could be an OS feature), and does it in a similar fashion, they get pissed.  Well, what the hell did you expect?
     

    
