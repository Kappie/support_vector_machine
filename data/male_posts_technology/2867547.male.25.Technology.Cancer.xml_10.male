

	 
      Today I devoted some time to play with NDoc, probably the most popular .NET documenter. I downloaded and tried out version 1.3 (beta) and succeeded to get a good MSDN-like output documentation for an assembly.   The reason I started my experiment with NDoc was to advertise to my colleagues the data access layer I implemented in my first (and only till now) .NET project. The framework is based on Reflection. It uses attributes to map class properties to table columns, in order to build proper SQL statements for SELECT, INSERT and DELETE. But I won’t get in any more details here…   The important thing is that we are starting a new .NET project (which, of course, requires interaction with a database) so I think that much of what I did is good enough and reusable. Don’t get me wrong, I am far from thinking it is the ultimate solution. I guess strongly typed datasets are a great alternative. Moreover even if sticking to this type of DAL implementation has a lot of room for improvements. As you've guessed, this small immature framework can not be compared to giants like EJB and its fellow technologies.   So I know that getting people start using your code is a tough task (unless you are the project manager, ha-ha!). So I have to persuade them that this framework:  (1)	makes them accomplish their tasks much easier  (2)	is easy to learn (and its internal details are easy to understand) (3)	is extensible and allows optimizations (4)	is error free (zero-defects-development is my passion, ha-ha! )  To accomplish my mission I: (1)	Implemented a few easy features, that were marked with TODO comments (for example optimizing SQL command building to use StringBuilder). I just don’t like to answer questions like “Why haven't you implemented…?” with “I didn’t have time” (2)	Doing a little code review to fix some peculiarities in the code (3)	Commenting the code thoroughly and making a compiled help file using NDoc  The next things, I plan to do is to do a documentation of my DAL implementation in a CodeProject articles’s like style (I love the way code and ideas is presented there). I was wondering if I should do it in English or in Bulgarian, but I choose BG to increase my chances of anybody reading it. I know that EN will expand my audience, but my target group is different :)  So I plan to document: (1)	what’s going on in here (framework basics) (2)	how to use the framework (including a sample code with a sample MS Access database with one or two tables. I wonder if I should add NUnit test classes to prove my point, but I am afraid this will be too much for people who have used .NET for a only few days) (3)	what are the limitations (4)	what enhancements I think can be made (uff, there are a lot of them)  Seems to be a lot of work, so let’s get started (no more blogging until I get this done)     
     
    
