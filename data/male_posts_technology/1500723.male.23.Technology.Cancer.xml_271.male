


       
       This is why I hate forced exceptions    Well, what a coincidence. Just talking about forced exceptions a few hours ago, and it comes down and bites me minutes later.   Java has forced exceptions, so if a method throws an exception, it has to either be handled or rethrown. While this is generally a good idea, the extra syntax of java makes this a real pain if you decide not to handle the exception after all.  So I have this program that calls various methods many many times, and once in a while the methods throw (expected) exceptions depending upon the state of the program. When certain exceptions are caught, a stacktrace is printed out on the screen, along with a timestamp and certain state variables.  The program is then run, and all output redirected into a file. The file is then examined to see what exceptions were thrown and the state at that time.  So I had a bunch of methods like so -  public void myMethod1() { try { blahblah.method(); } catch (Exception1 e) { e.printStackTrace(); } catch (Exception2 e) { ... } ... { } catch (ExceptionN e) { e.printStackTrace(); } }  When I mean a bunch, I mean a big bunch, around 250 methods, maybe more.  And there is a calling method -  public void callingMethod() { Determine which method to call (say myMethodX) myMethodX(); }  After running this, we found too many exceptions being thrown around to read the file properly, so a change of design was in order - put the output of different exceptions in different files. Unfortunately, this meant either pass the file objects upstream so that the method could write into it when an exception occured, or to propogate the exception down to callingMethod, so we decided to go with the latter.  Now we had to remove all try-catch blocks from every myMethodX and also declare that they throw Exception1, Exception5,... whichever exceptions they throw, and then catch these in callingMethod and write it to the appropriate place.  Removing try-catch blocks is easy - a simple vim  macro will do it. But declaring what exceptions are thrown must be done manually -- which means running through every one of those 250+ methods and declaring the exceptions that might be thrown.  If this was Python, removing the try-catch would have been enough; the exceptions would automatically pass through to the calling method without the need for any more changes. This is where the verbose syntax of Java makes me go absolutely nuts. In order to effect a small design change like passing exceptions on to the calling method, I have to go and modify hundreds of lines of code.  Is this what programmer efficiency is all about ? Does this verbose syntax actually help in producing better code ? I should think not. I am irritated. The prospect of going through every method, figuring out which exceptions might be thrown and then declaring those exceptions does not excite me at all. It is pure drudgework -- just to get the bloody thing to compile.  I've learnt my lesson. Java is utterly inflexible to design changes, even minor ones. Everything must be planned down to the finest detail, or else you get screwed later. The design did not work out as well as you thought ? Tough luck, you now have a major uphill climb (in the form of manipulating syntax all over the place) for your minor design change.  This sucks. 
     

    
