

						
						   Yesterday I had a nice time of 2 to 3 Hrs by going thru the new features and advantages of the next release of Microsoft SQL Server (Code Named "YUKON"). Microsoft says that the next release of SQL Server will be a new paradigm for database development. This version of SQL Server is integrated with .NET Framework which will enable database programmers to take full advantage of .Net Base Class Libraries. Using the CLR integration, many tasks that were difficult to perform in T-SQL can be better accomplished using managed code plus two news types of database objects aggregates and user defined types that are introduced in this version.  More product details and features of YUKON  urlLink here   For new development features read on  urlLink Overview of SQL Server YUKON    What are the major benefits for developers like me??   	The integration of CLR with SQL Server provides several major benefits to database developers:   	 Enhanced programming model:  The .NET languages are in many respects richer than Transact-SQL (T-SQL), offering constructs and capabilities previously not available to SQL developers.  	 	 Enhanced safety and security:  Managed code runs in a common language run-time environment, hosted by the database engine. This allows .NET database objects to be safer and more secure than the extended stored procedures available in earlier versions of SQL Server.  	 	 User defined types and aggregates:  Two new database objects which expand the SQL Server's storage and querying capabilities are enabled by the hosting the CLR.  	 	 Common development environment:  Database development is integrated into future releases of the Microsoft Visual Studio .NET development environment. Developers use the same tools for developing and debugging database objects and scripts as they use to write middle-tier or client-tier .NET components and services.          I expect that in the final version of SQL Server Yukon, an updated version of Visual Studio.NET will include special SQL Server projects containing the appropriate references that can load into the Visual Studio .NET IDE.  	 	 Performance and scalability:  Because managed code compiles to native code prior to execution, you can achieve significant performance increases in some scenarios.  The following are some experts on SQL Server YUKON:  	Transact-SQL is no longer be required to write SQL Server stored procedures, triggers, and user-defined functions. You'll be able to create these objects using any of the .NET languages -- VB.NET, C#, C++, or even COBOL.NET -- and compile them into .NET assemblies.  	 	One important benefit of relying on the .NET Common Language Runtime is that it can verify that all code hosted by SQL Server won't cause any memory usage errors that would bring down the server. In addition, SQL Server will benefit from the CLR's robust support for versioning and security.   	Data access in Yukon will be based on a new set of managed interfaces in ADO.NET. This new set of ADO.NET classes will be grouped within a namespace that is currently being called System.Data.SqlServer, and these classes will interact directly with SQL Server's internal query processing mechanisms.   	SQL Server will also leverage the Common Language Runtime's code access security model. By default, code doesn't have any permissions to create a graphical user interface, create threads, access the file system, or call unmanaged code. The only permissions implemented are those granted for in-process SQL Server data access.   	Altering assemblies will not be allowed to invalidate persistent data or indexes. For example, suppose you have an indexed, computed column that relies on a .NET function to perform the computation. Changing or dropping this function would invalidate any data stored in that index. Dependencies are tracked, and you can't drop an assembly if dependencies exist.   	In Yukon, you can encapsulate your middle-tier logic within server-side components and still have all the advantages of running as compiled machine code, not interpreted Transact-SQL. This won't make much of a difference for code that's primarily performing data access; the goal for Microsoft is that CLR data access code will execute as fast as the equivalent code written in Transact-SQL.   	Relying on .NET code won't hamper the scalability of your SQL Server database operations. Yukon's ability to handle a given number of concurrent users with a given set of hardware resources will be as good as (or better) than that of SQL Server 2000.   	A new developer tool called the SQL Server Workbench will support deployment of assemblies to multiple servers and will contain a powerful subset of Visual Studio.NET capabilities for code management. It's too early to tell what the SQL Server Workbench will actually look like, but it will most likely resemble the user interface currently available in Visual Studio.NET.  Learn more on YUKON's XML Support Features  urlLink Goodbye to Middle-Tier Logic    There are lot more features and advantages for YUKON, I need to dig more on net for YUKON...  

						
