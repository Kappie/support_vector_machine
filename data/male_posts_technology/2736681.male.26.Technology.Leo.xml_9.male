

     
      OK, its quite likely that, over the coming months, I will devote considerable attention to complaining about the state of UML 2 on this blog. Now, let it be clear, I am a MOF guy, since it was invented, and lived for many years without having to worry overly about the mess that was UML 1.x. When people mentioned it, I could just say, "Well, its not a problem in MOF", and be done with it. (Note: This was despite a great lack of understanding about MOF, and subsequent misunderstanding about its role).  This all changed with UML2 / MOF2. Notionally, the move involved redefining MOF as a subset of UML. Fair enough, I guess, although I can't really see why its thatt important. Except for, UML has no concept of extents or reflection. OK, we'll add that in - its still  nearly  a subset.  Then, somewhere, someone (and my prejudices tell me it was a UML person) invented this heinous thing called a <<combine>> (also "define"-style package merge). This is the most evil thing I've ever seen in a MOF. Unlike everything else in MOF, its not a structural relationship. Its an instruction, a copy basically (with some bells and whistles about merging features), that "throws away" the relationship after "applying it". CMOF uses it, as does EMOF (for definition), and it just doesn't hang together when you look at it closely. More problematic is that it introduces time into the MOF/UML definition story. Time has no place in a meta-meta-model.  Of course, all this aside, its still a dog's breakfast. EMOF is in its concepts a really nice little language (see EMF for an implementation, largely free of the problems discussed in this post). However, its formal definition in the specification is expressed as a CMOF metamodel, not as an EMOF metamodel, which totally defeats the purpose of a MOF! A MOF is a metametamodel that must be,  must be , self-defining! EMOF could be, easily, but isn't specified as such, which is just evil.  As for the documents themselves, I pity any UML tool vendor who takes it upon themselves to implement UML 2. I have read more coherent binaries than the UML 2 specification, which seems to have been inspired by the "Choose Your Own Adventure" books that I read as a child, but 10 times as long, and split across multiple books. It was cool when I was 7, but now its just a bloody nuisance.
     
    
