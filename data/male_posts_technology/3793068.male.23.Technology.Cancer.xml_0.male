

	 
      If you remember playing the old computer game '7th Guest' then you might remember the 8 Queens problem. The goal is to place 8 Queens on a chess board in such a way that no queen can attack another. It can be quite frustrating since it isn't very hard to place 7 queens, its getting that 8th that will drive you crazy.  This is the problem I had to solve for my AI class. We are learning Constraint Satisfaction Problems. The method we are using is Backtracking and Forward Checking. After about 3 days of beating my head around Backtracking I finally was able to code it up. Now all I need to do, is get Forward Checking working.  The main problem with Backtracking is that it will test every position even when it is known to be wrong. Thats where Forward Checking comes in. It will automatically eliminate all  incorrect solutions before it starts placing the next queen. How smart.  Once I have the java code finished I will post it for the world to see and laugh at my terrible coding. For the time being here is just the 'solve()' function from my code:     public static boolean solve(Queen[] q, int k) {     int col = 0;     for(col = 0; col      {         if (isLegal(q, col)) {             q[k].setColumn(col);             if (k >= 7){                 return true;             } else {                 if (solve(q, k+1)) {                     return true;                 }else{                     q[k].remove();                 }             }         }     }              return false; }   
    
