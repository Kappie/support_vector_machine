

    
       A game needs an engine, and this game is certainly no exception! I've established that I so far need these three engines:     3d rendering engine  physics engine  scripting engine   I have no intention of writing these engines myself, as I my main goal is to createa game.  These engines will be incorporated into a game engine where the 3d rendering and physics engine is somewhat manipulated by the scripting engine. I plan on using a scripting engine so that not everything will have to be coded and compiled into the game, and the game engine may be reused. It also gives the other members of the team much more freedom in what they can do.  I also need an environment in which I will develop this game and utillize these engines.   Possible 3d engines    urlLink http://irrlicht.sourceforge.net   The  Irrlicht Engine  is an open source high performance realtime 3D engine written in C++. It is completely cross-platform, using D3D, OpenGL and its own software renderer, and has  urlLink all of the state-of-the-art features  which can be found in commercial 3d engines.   urlLink http://crystal.sourceforge.net/    Crystal Space  is a free (LGPL) and portable 3D Game Development Kit written in C++. It supports: true six degrees of freedom, colored lighting, lightmapped and stencil based lighting, shader support, mipmapping, portals, mirrors, alpha transparency, reflective surfaces, 3D sprites (frame based or with skeletal animation, also using cal3d animation library), procedural textures, particle systems, halos, volumetric fog, scripting (using Python, Perl, Java, or potentially other languages), 16-bit and 32-bit display support, OpenGL, and software renderer, font support, hierarchical transformations, physics plugin based on ODE.   Physics engines    urlLink http://q12.org/ode    ODE  is an open source, high performance library for simulating rigid body dynamics. It is fully featured, stable, mature and platform independent with an easy to use C/C++ API. It has advanced joint types and integrated collision detection with friction. ODE is useful for simulating vehicles, objects in virtual reality environments and virtual creatures. It is currently used in many computer games, 3D authoring tools and simulation tools.    urlLink http://www.physicsengine.com/    Newton Game Dynamics  is an integrated solution for real time simulation of physics environments. The API provides scene management, collision detection, dynamic behavior and yet it is small, fast, stable and easy to use.    urlLink http://crystal.sourceforge.net/   Powerful physics library using ODE is included too. It is a dynamics modeling and simulation engine.   Scripting engines    urlLink http://www.mozilla.org/js/spidermonkey/    SpiderMonkey  is the code-name for the Mozilla's C implementation of JavaScript.    urlLink http://crystal.sourceforge.net/    Flexible plugin system which allows for plugging in other modules including scripting languages. Python, Perl, and Java scripting plugins are already included. There are also various other plugins (fonts, sound, physics, movie recording, movie playing, ...).    Development environment    urlLink http://www.bloodshed.net/dev/devcpp.html    Bloodshed Dev-C++  is a full-featured Integrated Development Environment (IDE) for the C/C++ programming language. It uses Mingw port of GCC (GNU Compiler Collection) as its compiler. It creates native Win32 executables, either console or GUI.   urlLink http://lab.msdn.microsoft.com/express/visualc/default.aspx   With a professional-grade compiler, code editor, debugger, project system, and more, Visual C++ 2005 Express Edition packs a lot of punch! New and experienced C++ developers alike will find that Visual C++ 2005 Express Edition delivers the tools and libraries they need to write all sorts of programs, from school assignments to game mods.  Obviously, I got some thinking and tinkering to do. Some of these seem more promising than the others, but I will try to go deeper into the APIs and see how various concepts in the game may be solved using the different engines.  The language will most probably be C++, both for the "game developer feeling" and because there are more tools and libraries available for C++ than any other language. I also want to refresh my C++a bit -- it has been too long since last time.    
    
    
