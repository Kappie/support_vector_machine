

     
      The following rule book is taken from the JavaWorld article To Ejb or Not to Ejb (refer link to resource)   The rule book   At this stage, I list a set of rules to guide you in deciding whether or not to use EJB. That's basically what the EJB/no EJB decision boils down to: looking at your own unique project and applying these rules.    Rules for choosing EJB      Choose EJB when you know your application will need to scale beyond initial low usage levels and support multiple, concurrent users.    Choose EJB if you need transaction management. For online catalogues or read-only systems with low user numbers, you probably don't need EJB. For financial systems or any system where you must preserve the ACID (atomicity, consistency, isolation, and durability) properties, EJBs are a must.    Choose EJB if you need a comprehensive security model.       Rules for not choosing EJB      Do not use EJB when you find no need for scalability, transaction management, or security and anticipate low numbers of read-only users.   Don't choose EJB if you don't need platform independence and don't mind being locked into one particular vendor. This rule isn't designed to be sarcastic; intranet applications serve as a good example where I would like to see as little complication as possible. Indeed, a solution like .Net could prove highly successful in such situations, even in a beta release.    Do not choose EJB if your team possesses no EJB experience (and you don't plan on ramping up or importing such experience).    Do not use EJB just because your company got a free set of licenses from vendor X.    
     
    
