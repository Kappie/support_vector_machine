

	 
      Try These Swing Examples..  ------------------------- InvisibleTreeModel.java  -------------------------  /*  (swing1.1) */ import javax.swing.tree.*; /** * @version 1.0 01/12/99 */public class InvisibleTreeModel extends DefaultTreeModel {   protected boolean filterIsActive;   public InvisibleTreeModel(TreeNode root) {    this(root, false);  }   public InvisibleTreeModel(TreeNode root, boolean asksAllowsChildren) {    this(root, false, false);  }   public InvisibleTreeModel(TreeNode root, boolean asksAllowsChildren       ,boolean filterIsActive) {    super(root, asksAllowsChildren);    this.filterIsActive = filterIsActive;  }   public void activateFilter(boolean newValue) {    filterIsActive = newValue;  }   public boolean isActivatedFilter() {    return filterIsActive;  }   public Object getChild(Object parent, int index) {    if (filterIsActive) {      if (parent instanceof InvisibleNode) { return ((InvisibleNode)parent).getChildAt(index,filterIsActive);      }    }    return ((TreeNode)parent).getChildAt(index);  }   public int getChildCount(Object parent) {    if (filterIsActive) {      if (parent instanceof InvisibleNode) { return ((InvisibleNode)parent).getChildCount(filterIsActive);      }    }    return ((TreeNode)parent).getChildCount();  } }  ---------------------- InvisibleNode.java ----------------------  /*  (swing1.1) */ import java.util.*;import javax.swing.tree.*; /** * @version 1.0 01/12/99 */public class InvisibleNode extends DefaultMutableTreeNode  {   protected boolean isVisible;   public InvisibleNode() {    this(null);  }   public InvisibleNode(Object userObject) {    this(userObject, true, true);  }   public InvisibleNode(Object userObject, boolean allowsChildren         , boolean isVisible) {    super(userObject, allowsChildren);    this.isVisible = isVisible;  }   public TreeNode getChildAt(int index,boolean filterIsActive) {    if (! filterIsActive) {      return super.getChildAt(index);    }    if (children == null) {      throw new ArrayIndexOutOfBoundsException("node has no children");    }          int realIndex    = -1;    int visibleIndex = -1;    Enumeration enum = children.elements();          while (enum.hasMoreElements()) {      InvisibleNode node = (InvisibleNode)enum.nextElement();      if (node.isVisible()) { visibleIndex++;      }      realIndex++;      if (visibleIndex == index) { return (TreeNode)children.elementAt(realIndex);      }    }          throw new ArrayIndexOutOfBoundsException("index unmatched");    //return (TreeNode)children.elementAt(index);  }   public int getChildCount(boolean filterIsActive) {    if (! filterIsActive) {      return super.getChildCount();    }    if (children == null) {      return 0;    }          int count = 0;    Enumeration enum = children.elements();          while (enum.hasMoreElements()) {      InvisibleNode node = (InvisibleNode)enum.nextElement();      if (node.isVisible()) { count++;      }    }          return count;  }   public void setVisible(boolean visible) {    this.isVisible = visible;  }    public boolean isVisible() {    return isVisible;  } }  ---------------------------------- InvisibleNodeTreeExample.java ----------------------------------   /* (swing1.1) */ import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.tree.*;import javax.swing.border.*; /** * @version 1.0 01/12/99 */public class InvisibleNodeTreeExample extends JFrame {  public InvisibleNodeTreeExample() {    super("InvisibleNode TreeExample");        String[] strs = {"swing",     // 0       "platf",     // 1       "basic",     // 2       "metal",     // 3       "JTree"};    // 4                                                 InvisibleNode[] nodes = new InvisibleNode[strs.length];    for (int i=0;i   public static void main(String args[]) {    InvisibleNodeTreeExample frame = new InvisibleNodeTreeExample();    frame.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {System.exit(0);}    });    frame.setSize(300, 180);    frame.setVisible(true);  }}     
     
    
