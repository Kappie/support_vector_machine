


    

       

      So, reading  urlLink an article on the Windows API  and the dire concequences the shift in Microsoft, from the "old school" of 100% backwards compatability to a "new school" of building stuff from groundup, has. Much of the article is really interesting, but the author so clearly misses alot of important points.   First of all, and this is a biggie for me, he says that nobody wants to spend X number of months  rewriting  their software from a C/C++ COM Application, or a VB6.0, to a .Net Application. Of course they don't, and why should they? Microsoft has repeated, over and over again, that this is not their intent at all! If your application works today in the Win32 API enviroment, then by all means keep it that way! Where .Net comes in is if you are planning a major upgrade to your application or a completly new application. And remember that  interoperatibility  is a major feature in the .Net Framework. You will still be able to use the old COM DLLs that your application uses, in a .Net application. So much of the earlier development work will still be very much useful. And in fact you can today develop COM+ applications/libraries in .Net that will work in Win32/COM applications!  Furthermore he complains that WinFX is going to replace the Win32 API and that this is a bad thing! He is obviously very comfortable with Win32 programming and so he knows how un-productive it can be, but still he thinks that a revamp and upgrade is a bad thing?! I have seen programmers spending hours doing stuff in C/C++ and Win32, then doing the same in VB6 took them about an hour, Great! But in .Net it would take perhaps less than 30 minutes! Now if that isn't Return On Investment, then what is? If you can cut development time in half, or more, then you company is saving heaps and heaps of money!   At the end he claims that nobody is using .Net to develop desktop applications... Well I'd say he is dead wrong, but has a point even so... Many existing applications will not be re-written in .Net, but most  new  applications, for the Windows plattform, are being written using the .Net Framework. Just look at the RSS-Readers around, they are fairly new and did not have an old plattform to build on. Many are built on .Net and takes advantage of the increased productivity and easier deployment to quickly develop new and improve existing features. Great! That would not, IMO, be possible using traditional programming frameworks.  A final point he makes is that the Longhorn timeframe technologies, such as Avalon and WinFS, is not all that great. He claims that they might be good, but the implementation is not done the correct way... Let me put it this way; Windows needs a new display technology and an improved way of organizing documents. The display technology addresses many of the complaints from both the community at large and the developer-community; it is too slow, both to render and to develop on. And many new features, such as high resolution displays, needs to be supported. Of course this could have been implemented, as he suggests, using traditional DLLs (Win32), but instead Microsoft chose WinFX/Avalon/Indigo/WinFS to do all this. For programmers it means a better, more streamlined, easier, faster and more secure development path. For end-users it means that they can get their applications faster, with more and better features and that applications will look better and be more usable than ever... Great!   The author also makes a big issue of web applications taking over for desktop applications... Well, we heard that from Sun MANY years ago, and it still has not happened... The ONLY major application that MOST people run are still desktop applicatons. And I can not see that chaning in the near/mid-near future (2-5 years) at all. I can not see how people will be able to run IM clients of the net, MP3 players, word processors or  games  via a web browser... Sorry, I just do not see it happening. I said the same when the "revolution" came, when Java was supposed to change the world and end Microsofts Reign of Terror (tm); it hasn't happened, and it won't any time soon.  The downside to .Net is, as the author states, that developers have to update their skills and learn to use new (and might I add; improved) tools to do the job.   Please, Mr. Author, read and pay attention to what Microsoft is saying about Longhorn; it will not break backwards compatability for most applications and many of the new feature will be available for Win32 style programming as well. And Windows.Forms IS the way to go, today, to prepare for Avalon. It should be a breeze to update the applications to support Avalon, a breeze I tell you! :)  [Listening to:  Machine  -  urlLink  Theatre of Tragedy   -  (4:14)]
