

	 
      So it's been a while since I last posted, a lot's been happening. My two projects have finished their major phases so I'm in a documenting and winding up mode for them and all of a sudden I seem to have grown a social life. I really could get used to this leaving work on time thing.   urlLink java.net: WS-Simplicity? [April 29, 2004]   The above is a link to Michael Champion's latest weblog entry on Java.net. Now you probably already know that I'm loving all things web services at the moment, have for a while. This blog entry in some ways is how I think, although I think he's a little pessemistic about implementation. Necessity is the mother of invention, but also, in developing terms, of implementation. Web services are a great way of "just doing it" in integration projects and so poeple are using them.  However now this technology is appearing on the radar of managers which will inevitably lead to the need for more reliable and secure services. This is why I'm betting that the next part of the WS-* stack to be widely implemented will be WS-Security and WS-Reliable messaging. The Apache project are already moving forward with these as part of their  urlLink WS-FX project , which also includes WS-Addressing.  Developers will tend to the easiest solution, always trying to avoid complexity. Web services are part of that, and a major driver is the availablility of good open source API's such as those from Apache.  Having looked at the Sandesha WS-ReliableMessaging project I am a little concerned that there is no easy way of implementing this into a client app, as it currently requires My-SQL for the back end. I'm sure a quick port to HSQLDB would be a temp fix.  I also think that the work of the  urlLink WS-I  is equally important in moving Web Services forward. However, their more theoretical work needs to be backed up by API's collecting implementations or a more complete WS-* stack toegether, and for all the major languages (at least Java, .NET and PHP). Some body to pull these together, possibly in both client and server packages, and perform interoperability testing between them would be the next step in my mind.  If this was the case, we would then have a stable WS-* stack of both standards and implementations that we could all rely on being at the other end.  As for the rest of the WS-* stack, well I'm not even going near that stuff for now.....well, at least for a couple of months! :D
     

    
