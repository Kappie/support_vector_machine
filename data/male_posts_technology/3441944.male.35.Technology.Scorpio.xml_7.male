

	 
      I thought I'd seen the last of static code analysis when I stopped programming in C all those years ago. Well there seems to be a resurgence of interest in this subject for my current language of choice Java.  In C the static analysis program lint was able to detect problems such as unused instructions (includes, variables, procedures, assignments), attempts to use deallocated memory, attempts to deallocate unallocated memory, uninitialized variables, unreachable code, etc. With the advent of Java much of this static validation is now handled by the compiler itself obviating the need for a separate static analysis tool. Or so I thought...  It seems that there is a new breed of static analysis tool for the Java language. These tools don't really concern themselves with the low-level details that your grandfathers tools checked for. These tools are more concerned with detecting and reporting problems with higher order structures and patterns. For example, these tools are able to detect database connection resource leaks by searching for bad patterns of connection allocation and deallocation. In principle this pattern can be applied to other areas that require matching resource allocation and deallocation sequences. Other examples are detection of bad use of thread synchronization; incorrect implementation of hashcode() and equals() methods; null pointer dereferencing; etc.  For more information check the following resources:  urlLink FindBugs  
     
    
