

       
       
 
 
 
 
    Code Generation in the .NET Framework Using XML Schema       
  Automatic code generation, be it data access layers, business entity classes, or even user interfaces, can greatly increase developer productivity. This process of generation can be based on a number of inputs, such as a database, an arbitrary XML file, a UML diagram, etc. Microsoft® Visual Studio® .NET comes with built-in support for code generation from W3C XML Schema files (XSD) in two forms: typed datasets, and custom classes for use with  XmlSerializer .   
  XSD files describe the content that is allowed in an XML document in order to be considered valid according to the document. The need to handle the data, which will ultimately be serialized as XML for consumption, in a type-safe manner led to various approaches to converting the XSD into classes. Recall that XSD was NOT created as a means to describe objects and their relationships. A better format already exists for that, UML, and it's widely used to model applications and to generate code from it. There are, therefore, some (expected) mismatches between .NET and its object-oriented programming (OOP) concepts, and those of XSD. Keep this in mind when you walk the path of XSD - classes mapping.  
  That said, the CLR type system can be seen as a subset of XSD: it supports features that can't be mapped to regular OO concepts. If you're using XSD only to model your classes as opposed to modeling your documents, therefore, you will probably find almost no conflicts.  
  During the rest of this article, we will discuss the approach of typed datasets, how the custom classes generated by the xsd.exe tool make for a better solution, and how to extend and customize the output of XSD - Classes generation.  
  A basic understanding of CodeDom is required in order to get the most out this article.
 
  
       
    
