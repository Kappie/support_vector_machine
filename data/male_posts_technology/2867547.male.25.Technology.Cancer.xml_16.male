

	 
      Recently I read the wonderful article  urlLink Continuous Integration with CruiseControl.NET and Draco.NET . If you are unfamiliar with the concept of Continuous Integration, you may want to start with  urlLink this  famous article by Martin Fowler. But in short, I will just repeat that:     Continuous integration is the strategy of making sure that changes to the projects codebase are built, tested and reported on as soon as possible after they are introduced. This assumes several prerequisites:  1) Your code is maintained in a central location, preferably a source code control product like CVS or Visual SourceSafe.  2) You have made a build script of some kind, like a NAnt .build file or a Make script.  3) Optionally, you have included unit tests in the codebase as part of the project.   Once these are in place, you can create a continuous integration environment. This is a central server that monitors the source code repository and springs into action when it notices changes (commits). Its job is to check out a full version of the codebase whenever any part of it changes, run your build file and report on the results. What constitutes a build is up to you; normally, a build is a full compile of all source files, running unit tests and creating the deployment archive.   So the author compares in detail the opensource projects  urlLink Draco.NET  and  urlLink CruiseControl.NET . His conclusion is:    If you are working on a small team with a medium to small sized project, I would recommend Draco. It is light, fast and easy to get going with. The larger your team or project, the more I would lean towards CruiseControl.NET, since it is more configurable and has better monitoring tools, allowing your team members to get access to the data in a variety of ways. Plus, CruiseControl.NET has a large team of developers working on it, which means that though the two projects will probably have very similar features over time, CruiseControl.NET might get them faster (think MSBuild support) .  I will just mention that the article is already a little outdated and CruiseControl.NET has some new exciting features. I haven't tried it for real, but the docs say it all ;) I will probably first employ Draco.NET. But I am still struggling to get my team to prerequisites (1) source control , (2) build script and (3) automated tests. If those are not met, oops! How can I practice continuous integration, when there is no integration effort at all :)
     
    
