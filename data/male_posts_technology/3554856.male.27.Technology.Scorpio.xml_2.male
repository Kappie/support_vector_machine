

	 
       Problem:   Erratic behavior of file operations. Copying of file from one directory to another does not seem to work.    Current System:   In the program, a block of code is used to copy file from one dir to another dir using java runtime. Another block of code is used to delete files from source dir.   Cause:   Since runtime runs on a separate thread, there does not seem to be any synch mechanisms between the two blocks of code.   Solution:   Insert "process.waitFor()" in the copy block. This causes the runtime to finish copying and then return to the main thread. Deleting the source after this does not have any adverse affect.   Sample Program:    private static final String DOS_COPY_COMMAND = "cmd.exe /c copy ";   /**    * Copy a file from source to destination using DOS' copy command    *    * @param source source file name    * @param destination destination file name    * @throws IOException    */   public void fileCopy(String source, String destination) throws IOException, InterruptedException  {      String copy = DOS_COPY_COMMAND + source + " " + destination;     System.out.println(" Command to create a copy : " + copy);     Runtime run = Runtime.getRuntime(); //get a handle on the current OS runtime     Process copyResult = run.exec(copy); //execute the OS cmd, gives handle on the Process     copyResult.waitFor() ;   }     /**    * Delete a file using DOS' del command and the specified file name    *    * @param fileName file to be deleted    * @throws IOException    */   public void deleteFile(String fileName) throws IOException {      String del = fileName;     System.out.println(" Command to delete a File : " + del);     File file = new File(del);     file.delete()  ;   }    // In main program      try {       cmd.fileCopy(source, destination);       cmd.deleteFile(source) ;     }catch (InterruptedException ie){       logger.error(" Error while wait : " + ie.getMessage()) ;     }catch (IOException ioe) {       logger.error(ioe.getMessage(), new IOException(ioe.getMessage()));     }    - Rahul Ramachandra
     
    
