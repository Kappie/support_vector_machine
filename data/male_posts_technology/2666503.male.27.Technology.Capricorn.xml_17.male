

   
 
 
   

       
      This issue has been hashed and rehashed around the web, but I wanted to throw my two cents in regarding the issue.  That's because, unlike the authors of the other articles I've read on this subject, I've actually coded two almost identical projects using both  PHP with MySQL   and   ASP.NET with SQL Server , so I feel like I can give a fair and unbiased point of view.  Why did I create the same project using both technologies?  Quite simply, money.  Some people wanted to buy the project I'd written in ASP.NET, but they needed it in PHP.  All that said, I'll compare the technologies from three vantage points: Availability, Performance and Development Speed.   Availability  PHP wins hands-down in the availability department.  That's because most web servers still run some form of UNIX platform (a popular one being Linux), and PHP's birthplace is the UNIX world. ASP.NET, however, is only available for web servers running Microsoft's Internet Information Server (IIS).  So if you're wanting to sell the project you're creating to as many webmasters as possible, and if it's possible to create the project in either ASP.NET -or- PHP, I would suggest using PHP.  A search for PHP at Google.com as of today returns 319,000,000 results compared to 5,520,000 for ASP.NET.   Performance  You PHP coders out there will probably scoff at this, but guess what--ASP.NET is faster.  ASP.NET's caching and native SQL Server database access can't be beat if the bottom line is performance.  But don't take my word for it, check out  urlLink the benchmarks  at eWeek.com.  At first glance MySQL seems faster than SQL Server, but don't stop at the first graph!  Click 'next' twice and look at the ASP.NET / IIS / SQL Server performance graph.  The Microsoft trio was actually able to serve up 33% more page views per second than PHP/MySQL.  I've found this to be the case in my own tests as well.  But I will say this: ASP.NET and SQL Server may perform better, but it's no "tortoise and the hair" comparison.  PHP with MySQL still performs very well.   Development Speed  In the arena of development speed, it's a toss up.  On the one hand, ASP.NET's code-behind makes handling the events surrounding form input  very  easy and fast.  So that's great.  ASP.NET also provides a large number of controls that make form validation and database connectivity a breeze.  However, in my opinion, the syntax of the PHP language is more powerful, including it's (oh-my-God-I-love-this) ability to do this:  print "Writing a variableâ€™s value ($val1) to the output stream.";  Instead of this:  Response.Write("Writing a variable's value ("  val1  ") to the output stream.")  You would be  amazed  at how much time and coding effort that one little syntax difference saves, not to mention how much more readable it makes the code.  PHP is a full featured, mature language now (and an object-oriented one at that if you care to use classes).  Also, PHP has a large number of very useful little functions that ASP.NET lacks, and other functions that are just easier to use.  For example, the  fopen()  function has the ability to open a URL and read from the web page as it were a normal file.  To do the same thing with ASP.NET takes about 5 or 6 lines of code.  PHP also has the ability to overlook various errors and drudge on despite problems, whereas ASP.NET will just die when a problem occurs and is not properly handled.  On the one hand it can be argued that this is a bad thing that allows badly written code, but on the other hand if you're just trying to slam out some code to test an idea, it's much faster.  I've written a web crawler for my little mini search engines (such as the  urlLink weight loss search engine ) in PHP, and frankly you just can't plan for everything when parsing and indexing vastly different web page designs.  PHP gracefully slips past the problems and continues indexing.  I can look at the warnings and modify the crawler accordingly, but I didn't have to loose hours of work because of it.   Is that your final answer?  In conclusion, I say that both PHP and ASP.NET are  great  development platforms.  If you need wide availability, use PHP.  If you want absolutely the best performance possible, use ASP.NET/SQL Server/IIS.  If you need to get your project done in a hurry, either one is fine. 
     

    
