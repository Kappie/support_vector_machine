

     
       Web Services - A Technical Introduction (Part 1)    What is web service?  There are different kinds of definitions available for web services. Here is my take, Web Service is a way to integrate application components from different applications (within or outside of enterprise) using a standard set of protocols.   Here is more formal definition from IBM white paper,  Web Services are a new breed of web application. They are self-contained, self-describing, modular applications that can be published, located and invoked across the web. Once a web service is deployed, other applications (or other web services) can discover and invoke the deployed service.   Another definition from psgroup white paper,  A Web Service is a URL-addressable software resource that performs functions and provides answers. A Web Service is made by taking a set of software functionality and wrapping it up so that the services it performs are visible and accessible to other software applications.   The working definition of a Web service from W3C Web Services Architecture  A Web service is a software application identified by a URI, whose interfaces and binding are capable of being defined, described, and discovered by XML artifacts, and supports direct interactions with other software applications using XML-based messages via Internet-based protocols.    There have been similar techniques like EDI (Electronic Data Interchange) to exchange message/data between enterprises. There were no standard protocols for doing that. Enterprises have been using their own custom formats. What web services offer is a set of platform-independent and language-independent standards that not only makes application integration easy, but also giving a new ways to build custom applications by combining multiple Web Services. Web Services lowering the effort and costs associated with Application interoperability.    Web Services - Architecture    TCP, HTTP, XML  These three standard elements are the base for the web service architecture.   1. TCP/IP (Transmission Control Protocol/Internet Protocol)  TCP/IP is the Universal networking protocol. The Internet is running on this protocol, most of networks can communicate through TCP/IP. HTTP, SMTP, FTP are built on this transport protocol. TCP/IP is more a low level protocol. As a web service developer, it is not necessary to know TCP/IP protocol details.   2. HTTP (Hyper-Text Transmission Protocol)  HTTP is the most widely used communication protocol. Most of the browsers support HTTP. By using this HTTP protocol alone we can develop a complete Web Service application (REST-HTTP/URI Services), which we are going discuss in our article of this series.   3. XML (eXtensible Markup Language)  XML is a markup language to represent structured information. The XML specification defines a standard way to add markup to documents. Unlike Html, xml only focuses on the structure and content of the data and it is extendable. XML make it is possible for enterprises or developer groups to share data, provided they agree on the semantics of that data in advance. One of the most widely used xml standard is RSS feed format.  Writes Kevin Werbach in Release 1.0, the great thing about XML for Web Services is that its attributes are self-defining. If Sam builds a stock-quote application and defines fields for price and volume, he can enclose them with tags, making it easy for Ethel (or a system she builds) to parse what he was trying to do.  XML is a formatted data which can be exchanged across platforms, applications and tools.   Web Services Framework - publish, find, and bind  On top of the above three base elements there are 3 more entities required to put together the Web Service framework.   1. Service providers:  Service provider is the entity that creates the Web Service. This web service can be any functionality the provider wishes to expose. Service providers have to describe the web service in a standard format and they usually publish the web service details in a remote web service registry.   2. Service registry:  A service registry is a central location where the service provider publishes their web services. Service providers normally publish their web service capabilities in the service registry for service consumers to find and bind to their web service. Registry is not repository, it just stores web service metadata (like yellow pages) not web service itself.   3. Service consumer:  Service consumer is the entity that consumes the Web Services. The service consumer can know the functionality of a web service from the description made available by the service provider. To know these details, it does a find in the service registry and bind to service provider's web service in turn to invoke that web service.  Generally there are three types of operations are involved in any web service.  1. Publish  Publishing involves registering services to a registry (publishing) or removing these entries from Registry (un-publishing)   2. Find   Find involves finding services from service registry by Service consumer.   3. Bind  Binding takes place between the service requester and the service provider.  There are standards exists for all of the above elements. Web Service is published by using WSDL, Find is done via UDDI and SOAP is being used for Binding. The data exchange is done via XML. The underlying transport protocol for Web Services is the same as that used for accessing documents on the internet – HTTP.   SOAP, UDDI, WSDL    1. SOAP (Simple Object Access Protocol)  SOAP is neither a programming language nor an API. It is just a protocol, which gives a standard way to pass XML data over HTTP. But SOAP is not only bound to HTTP, it can be bound to any other transport protocol like SMTP, FTP and so on.   Service Description - WSDL (Web Services Description Language)  WSDL provides a way for service providers to describe the basic format of web service requests over different protocols or encodings. WSDL is used to describe what a web service can do, where it resides, and how to invoke it.     Service Publish  Discovery - UDDI (Universal Data Discovery and Integration)  UDDI provides a way for service providers to publish information about their services. It is metadata of the web service. It contains information like where the service located and what it does, etc.   Next week : Web Services - The REST way (part 2) 
     
    
