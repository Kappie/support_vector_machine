


       
       MySQL Backup File System (MBFS)   This is what I am upto for the next couple of months....   /************************************************* Todo  *  OOPS!!! My design and code doesn't take care creation of the files through the open call.... *  Remove the race conditions by having a sync primitive that allows multiple readers (multiple posix API can be executing in parallel) and only one writer( only one setting or resetting). *  Currently we are planning to maintain the information for all the open files in the memory .. This certainly shall cause a bottle neck and some criticism We have to think a complex mechanism. How to store information of open files in files... Use a sparse tables concept.... Map the exact memory into the file... *  use pathconf to get the maximum path name and use that. * . Race conditions while doing the same/different operations from different threads on the same file. How to tackle this. * Dynamic hash size.. Currently we will be having only static hash size. * open file descriptors uses static array now.. Either it has to be made dynamic array or linked list. * Check whether the requrement of copying the backup.inf after the backup mode reset is valid. * Merge the two meta data structures. * Benchmark the file system calls and optimize the code. * Change the frequently used or smaller functions into macros * have a configuration option of number of file descriptors I can use. Use them for meta data file space. * Check for the global variables usage. * Check whether is there any chance of stack overflow... Stack limit is 4 kB. * Intl enabling. * Better way of reusing the opened Meta data file descriptors across the calls. * Benchmark metadata_file update info. * Deletion and creation of the files during the backup mode... and deletion and creation of the directories... ============================================= Todo's before sending the patch. 1. Thread safe, thread enabling and removing all the race conditions and thread related problems.. 2. Hashing. 3. File Descriptor to FileName Mapping. 4. Restorartion and backup.inf implementation. 5. Meta data optimization. 6. Deletion and creation of files during the backup mode. 7.. Good debugging integration. 8. Instad of stati carray for backup_open_fd a dynamic linked list to support the platforms that allow large Fd's 9. Currently mbfs dooesn't support multiple threads calling the different/same posix functions acting on the same files across the multiple threads - Very bad requirement have to support this. Design Todo's : Design problems not solved Yet. 1. Open file descriptors problem currently i open and close for every metadata file read and write : Its not a big problem since we are having most of the metadatafile information in the memory. 2. Memory requirements : a. for filenames. 	b. In memory meta. 	c. file descriptor info. 	d. for the systems that allow large number of open files.. We might be using up the memory without any checkpoint.. We are to seriously consider this issue. Todo's of low priority. 1. Organized automated test cases for mbfs...  2. What is the best way to find whether the file is present. 2. Merging with MySQL source code. 3. Testing MySQL with Backup feature. 4. Creation and Deletion of Directories. 5. Benchmarking and Performance improvement. 6. Design Sync. Tip on Multithreaded testing.. Test the various combination of API's on the same/different files across the multiple threads. ****************************************************/
     

    
