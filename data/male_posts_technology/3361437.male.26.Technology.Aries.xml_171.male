

       
       
 
 
   Strongly-typed, event-rising, design-time generated custom XmlSerializers    
  Summary  
  There are a couple known issues with the XmlSerializer:  
 
  First-time use is painfully slow, because of the temporary assembly generation and compilation.  
  If you want to do something else other than straight serialization, there's no easy way of customizing it.   
  Whidbey will bring a solution to the first, in the form of the "sgen" tool, which will generate at design-time the serialization assembly. I still haven't looked at the solutions it offers for the second issue.  
  So, are you condemned to waiting 'till Whidbey? Are you condemned to either choose between the straightforward-but-almost-impossible-to-customize XmlSerializer approach and endless lines of XmlReader/XmlDocument/XPath code to do almost the same yet generallywith less performance just to gain the flexibility you need? Well, I turns out that I am a firmly believer on automating boring and repetitive tasks, so I'm not happy at all with people choosing the later, because I believe it leads to hard to maintain, inflexible, and really ugly code. You waste so much effort that would be better put to work on creative stuff, and making your app great. And performance is always a big issue, at least in my view.  
  This article explains how to achieve design-time XmlSerializer generation, how it's customized to allow for the stuff you always thought impossible, such as getting events for each kind of object being deserialized. 
 
 
  
       
    
