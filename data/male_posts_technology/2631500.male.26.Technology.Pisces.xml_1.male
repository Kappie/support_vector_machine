

	 
       C#    Once we decided to use the IE treeview control the hierarchical data, the problem was how to populate it. We had to display several hirarchies, but the number of levels was not fixed. For example - the product hirarchy had two levels: Product Family and Product; the Geography hierarchy had three levels: Country, State and County.  We needed a generic function which will create the tree, no matter how many levels there are. The following code is the solution I came up with.  We'll take the geography hierarchy as the example. The public function takes a DataSet as the parameter. You have to fill the dataset with three tables - Country, State and County. Be sure to assign the names to the table. Then set the relationship between the tables. Pass the dataset to the public function. That's all!   Each node of the tree will be displayed as Code - Description. For example - "IN - India". The type of the node (NodeType) will be the table name.   Do let me know if you have any comments.                    ///     <   summary   >             ///   This function creates a tree from a dataset. The function creates the first level nodes              ///   and then passes control to the recursive CreateTree function to create the child nodes.             ///   The names of the tables in the dataset and their relationships should be specified.             ///   If there are n tables in the dataset, the function expects n-1 relationships.           ///     </   summary   >           ///     <   param       name  = "dsTreeData"  >  </   param   >            public     void   CreateTree(DataSet dsTreeData)         {                 myTreeView.Nodes.Clear();                   foreach  (DataRow row in dsTreeData.Tables[ 0 ].Rows)                 {                         TreeNode treeNode = CreateNode(row[ 0 ] +  " - "  + row[ 1 ],                         									row[ 0 ].Tostring(),                          									dsTreeData.Tables[ 0 ].TableName);                         myTreeView.Nodes.Add(treeNode);                           if   (dsTreeData.Tables.Count >  1 )                         {                                 CreateTree(row.GetChildRows(dsTreeData.Relations[ 0 ].RelationName),                                  0 ,                                 treeNode,                                  dsTreeData);                         }                 }           }            ///     <   summary   >             ///   Recursive function which actually creates the tree.             ///     </   summary   >           ///     <   param       name  = "rows"  >  </   param   >           ///     <   param       name  = "relationIndex"  >  </   param   >           ///     <   param       name  = "parentNode"  >  </   param   >           ///     <   param       name  = "dsTreeData"  >  </   param   >            private     void   CreateTree(DataRow[] rows,   int   relationIndex, TreeNode parentNode, DataSet dsTreeData)         {                    foreach  (DataRow row in rows)                 {                         TreeNode treeNode = CreateNode(row[ 0 ] +  " - "  + row[ 1 ],                                 row[ 0 ].Tostring(),                                 dsTreeData.Tables[relationIndex +  1 ].TableName,                                 );                           if   (relationIndex +  2  < dsTreeData.Tables.Count)                         {                                 CreateTree(row.GetChildRows(dsTreeData.Relations[relationIndex +  1 ].RelationName),                                                 relationIndex +  1 ,                                                 treeNode,                                                 dsTreeData);                         }                         parentNode.Nodes.Add(treeNode);                 }         }           ///   <   summary   >           /// This function creates a new node and sets its properties           ///   </   summary   >           ///   <   param       name  = "text"  >  The text to be displayed  </   param   >           ///   <   param       name  = "nodeData"  >  Data represented by the node  </   param   >           ///   <   param       name  = "nodeType"  >  Type of the node  </   param   >           ///   <   param       name  = "target"  >  The target for the URL  </   param   >           ///   <   returns   >  The new node created.  </   returns   >            private   TreeNode CreateNode(  string   text,   string   nodeData,   string   nodeType)         {                 TreeNode node =   new   TreeNode();                  node.Text = text;                 node.NodeData = nodeData;                 node.Type = nodeType;                    return   node;          }    
     
    
