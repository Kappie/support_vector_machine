

     
       Lojban Grammar    urlLink Lojban  grammar, so far as I understand it, is pretty simple. It works somewhat like a computer program- in computer programs, you have a set number of arguements that go to a function. Take this Python function, for instance:   def add (a, b): return a + b  This program expects a select number of arguements- namely, two- to work. Now, think about how this would work in terms of language...   def talk (a, b): a.talks(b)   Let's say we were to use it,   talk("Bill", "Martha")  We'd know that 'Bill' is talking to 'Martha' (whomever they are). Or if we said:   talk(me, you)  You'd know that whoever was represent by the variables 'me' and 'you' were talking. It works pretty much the same in Lojban:   mi tavla do   Now, of course, like most languages, Lojban puts one of the variables before the verb (though that is changable), and that is somewhat unusual in programming language terms, but basically the ideas are analogous. Now, if you wanted to replace those variables with actual names, you'd have to Lojbanize the names (see the link for info on that), and prefix them with the particle 'la', which just means 'what follows is a name'. So:   la bil. tavla la martan.    (the period is optional quasi-punctuation that just indicates a pause after the name) Now, what if you wanted to, instead of variables or proper names, insert nouns? It works in a similar fashion- 'le' prefix for definite references, (THE x) and 'lo' for indefinite ones ('a'  or 'some'):   le tavla cu tavla mi  "The talker is talking to me"   Anyhow, more information is available on the website. I'll post more tidbits later, perhaps.  -Ian
     
    
